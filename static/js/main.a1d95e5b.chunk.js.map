{"version":3,"sources":["components/Form/ContactsForm.module.css","components/Form/ContactsForm.jsx","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","App.js","reportWebVitals.js","index.js","components/Contacts/Contacts.module.css"],"names":["module","exports","ContactsForm","checkExistingContacts","onSubmit","useState","name","setName","number","setNumber","handleInput","target","value","validateFrom","alert","e","preventDefault","className","s","container","type","onChange","Contacts","contacts","deleteContact","length","map","id","button","data-key","onClick","empty","Filter","input","App","JSON","parse","window","localStorage","getItem","setContacts","useEffect","setItem","stringify","filterState","setFilterState","filteredContacts","useMemo","normalizedFilter","toLowerCase","filter","contact","includes","newContact","shortid","generate","isExistingContact","find","key","dataset","leftContacts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1d95e5b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsForm_container__so_Rq\"};","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport s from './ContactsForm.module.css';\n\nfunction ContactsForm({ checkExistingContacts, onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInput = ({ target }) => {\n    const { name, value } = target;\n    if (name === 'name') {\n      setName(value);\n    } else {\n      setNumber(value);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const isValidFrom = validateFrom();\n    if (!isValidFrom) return;\n\n    onSubmit({ name, number });\n\n    setNumber('');\n    setName('');\n  };\n\n  const validateFrom = () => {\n    if (!name || !number) {\n      alert('Some input is empty');\n      return false;\n    }\n\n    return checkExistingContacts(name);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className={s.container}>\n        <label>\n          Enter the name\n          <input type=\"text\" value={name} name=\"name\" onChange={handleInput} />\n        </label>\n        <label>\n          Enter the number\n          <input\n            type=\"tel\"\n            value={number}\n            name=\"number\"\n            onChange={handleInput}\n          />\n        </label>\n      </div>\n\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nexport default ContactsForm;\n\nContactsForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nimport s from './Contacts.module.css';\n\nexport default function Contacts({ contacts = [], deleteContact }) {\n  return (\n    <ul>\n      {contacts.length > 0 &&\n        contacts.map(({ name, number, id }) => {\n          return (\n            <li key={id}>\n              <span className={s.name}>Name: {name}</span>\n              <span className={s.number}>Number: {number}</span>\n              <button\n                className={s.button}\n                data-key={id}\n                onClick={deleteContact}\n              >\n                Delete\n              </button>\n            </li>\n          );\n        })}\n      {contacts.length === 0 && <li className={s.empty}>List is Empty</li>}\n    </ul>\n  );\n}\n\nContacts.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n};\n","import PropTypes from 'prop-types';\n\nimport s from './Filter.module.css';\n\nexport default function Filter({ value, onChange }) {\n  return (\n    <label>\n      Filter\n      <input\n        className={s.input}\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import shortid from 'shortid';\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport './App.css';\n\nimport ContactsForm from './components/Form/ContactsForm';\nimport Contacts from './components/Contacts/Contacts';\nimport Filter from './components/Filter/Filter';\n\nfunction App() {\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(window.localStorage.getItem('contacts')) ?? [];\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const [filterState, setFilterState] = useState('');\n\n  const checkExistingContacts = name => {\n    const isExistingContact = !!contacts.find(contact => {\n      return contact.name === name;\n    });\n\n    isExistingContact && alert(`${name} is already in your contacts`);\n\n    return !isExistingContact;\n  };\n\n  const addContact = contact => {\n    const newContact = {\n      id: shortid.generate(),\n      ...contact,\n    };\n\n    setContacts(contacts => [...contacts, newContact]);\n  };\n\n  const deleteContact = e => {\n    const key = e.target.dataset.key;\n\n    const leftContacts = contacts.filter(contact => {\n      return contact.id !== key;\n    });\n    setContacts(leftContacts);\n  };\n\n  const filterChange = e => {\n    setFilterState(e.target.value);\n  };\n\n  // просто для практики\n  const filteredContacts = useMemo(() => {\n    const normalizedFilter = filterState.toLowerCase();\n\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(normalizedFilter);\n    });\n  }, [contacts, filterState]);\n\n  return (\n    <div className=\"container\">\n      <div>\n        <h1>Phonebook</h1>\n        <ContactsForm\n          onSubmit={addContact}\n          checkExistingContacts={checkExistingContacts}\n        />\n        <Filter value={filterState} onChange={filterChange} />\n      </div>\n      <div>\n        <h2>Contacts</h2>\n        <Contacts contacts={filteredContacts} deleteContact={deleteContact} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"Contacts_name__25ers\",\"number\":\"Contacts_number__3xFN5\",\"button\":\"Contacts_button__3OGpI\",\"empty\":\"Contacts_empty__1zP8v\"};"],"sourceRoot":""}